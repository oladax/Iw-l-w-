import React, { useState } from 'react';

const BookSearch = () => {
  // State to hold the search query, fetched books, and selected book URL
  const [query, setQuery] = useState('');
  const [books, setBooks] = useState([]);

  const link = "https://books.google.com.ng/books/about/Web_Service_APIs_and_Libraries.html?id=Pt2aAwAAQBAJ&redir_esc=y"

  // Function to handle the search button click
  const handleSearch = async () => {
    try {
      // Make a GET request to the Google Books API
      const apiKey = "AIzaSyCmSq1TVDrDfG6DrbZakTEyqyueSSvqJ1E"; // Replace with your actual API key
      const response = await fetch(
        `https://www.googleapis.com/books/v1/volumes?q=${query}&key=${apiKey}`
      );
      const data = await response.json();

      if (data.items) {
        // Update the books state with fetched book data
        setBooks(data.items);
        console.log(data.items)
      } else {
        // If no books found, set the books state to an empty array
        setBooks([]);
      }
    } catch (error) {
      // Handle any errors that occur during the API request
      console.error(error);
      setBooks([]);
    }
  };

  

  // Function to download the book in PDF format
  const handleDownloadPDF = async (url) => {
    try {
      // Make a GET request to the book download URL
      const response = await fetch(url);
      const blob = await response.blob();
      const blobUrl = URL.createObjectURL(blob);

      // Create a link element to trigger the download
      const link = document.createElement('a');
      link.href = blobUrl;
      link.download = 'book.pdf';
      link.click();
    } catch (error) {
      console.error('Error occurred while downloading the PDF:', error);
    }
  };

  return (
    <div>
      {/* Search input */}
      <input
        type="text"
        value={query}
        onChange={(e) => setQuery(e.target.value)}
      />
      {/* Search button */}
      <button onClick={handleSearch}>Search</button>

        {/* Render the list of books */}
  {books.length > 0 ? (
    <div>
      {books.map((book) => (
        <div key={book.id}>
          {/* Book title */}
          <h3>{book.volumeInfo.title}</h3>
          {/* Book author(s) */}
          <p>Author: {book.volumeInfo.authors?.join(', ')}</p>
          <p>Categories: {book.volumeInfo.categories?.join(', ')}</p>

          <div>
            <a href={link}>Direct search</a>
            <a href={book.volumeInfo.infoLink}>Information</a>

          </div>
          <p>{book.volumeInfo.description}</p>
          <p>{book.volumeInfo.publishedDate}</p>
          <p>{book.volumeInfo.pageCount}</p>

          {/* Book thumbnail image */}
          {book.volumeInfo.imageLinks && (
            <img
              src={book.volumeInfo.imageLinks.thumbnail}
              alt={book.volumeInfo.title}
            />
          )}
          {/* Download PDF button */}
          {book.accessInfo.pdf && (
            <button onClick={() => handleDownloadPDF(book.accessInfo.pdf.downloadLink)}>
              Download PDF
            </button>
          )}
        </div>
      ))}
    </div>
  ) : (
    <p>No books found.</p>
  )}

  {/* Render the PDF viewer */}
 
</div>


  )}

  export default BookSearch